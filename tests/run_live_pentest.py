#!/usr/bin/env python3
"""
Polly Live Server Penetration Test Runner
Security testing against the live server at polly.pacnp.al
"""

import sys
import os
import argparse
from pathlib import Path
from urllib.parse import urlparse
# Add the project root to the Python path
project_root = Path(__file__).parent.parent
sys.path.insert(0, str(project_root))

from tests.run_pentest import SecurityTestRunner


def main():
    """Main entry point for live server testing"""
    parser = argparse.ArgumentParser(
        description="Run penetration tests against the live Polly server",
        formatter_class=argparse.RawDescriptionHelpFormatter,
        epilog="""
Examples:
  # Test against live server at polly.pacnp.al
  python tests/run_live_pentest.py

  # Test against custom URL
  python tests/run_live_pentest.py --url https://custom-polly-server.com

  # Test with verbose output
  python tests/run_live_pentest.py --verbose

  # Test only web interface
  python tests/run_live_pentest.py --web-only

  # Test only API endpoints
  python tests/run_live_pentest.py --api-only
        """,
    )

    parser.add_argument(
        "--url",
        default="https://polly.pacnp.al",
        help="Target URL for penetration testing (default: https://polly.pacnp.al)",
    )

    parser.add_argument(
        "--verbose", "-v", action="store_true", help="Enable verbose output"
    )

    parser.add_argument(
        "--web-only", action="store_true", help="Run only web interface tests"
    )

    parser.add_argument(
        "--api-only", action="store_true", help="Run only API endpoint tests"
    )

    parser.add_argument(
        "--output", "-o", help="Output file for detailed report (JSON format)"
    )

    args = parser.parse_args()

    # Validate arguments
    if args.web_only and args.api_only:
        print("❌ Error: Cannot specify both --web-only and --api-only")
        return 1

    # Display warning for live server testing
    print("⚠️  LIVE SERVER PENETRATION TESTING")
    print("=" * 60)
    print(f"Target URL: {args.url}")
    print("WARNING: This will perform security testing against a live server.")
    print("Only proceed if you have explicit authorization to test this server.")
    print("=" * 60)

    # Confirm authorization
    if urlparse(args.url).hostname != "polly.pacnp.al":
        confirm = input("\nDo you have authorization to test this server? (yes/no): ")
        if confirm.lower() not in ["yes", "y"]:
            print("❌ Testing cancelled - authorization required")
            return 1

    print(f"\n🎯 Starting penetration tests against: {args.url}")

    try:
        # Create test runner for live server
        runner = LiveServerTestRunner(
            base_url=args.url,
            verbose=args.verbose,
            web_only=args.web_only,
            api_only=args.api_only,
            output_file=args.output,
        )

        success = runner.run_tests()

        if success:
            print("\n✅ Live server security testing completed successfully!")
            return 0
        else:
            print("\n❌ Live server security testing completed with issues!")
            return 1

    except KeyboardInterrupt:
        print("\n⚠️  Testing interrupted by user")
        return 130

    except Exception as e:
        print(f"\n💥 Testing failed with error: {e}")
        if args.verbose:
            import traceback

            traceback.print_exc()
        return 1


class LiveServerTestRunner:
    """Specialized test runner for live server testing"""

    def __init__(
        self, base_url, verbose=False, web_only=False, api_only=False, output_file=None
    ):
        self.base_url = base_url
        self.verbose = verbose
        self.web_only = web_only
        self.api_only = api_only
        self.output_file = output_file

        # Create the main security test runner
        self.runner = SecurityTestRunner(base_url=base_url, use_live_server=True)

    def run_tests(self):
        """Run the appropriate test suites"""
        print(f"🔍 Initializing security tests for: {self.base_url}")

        # Set environment variables for live server testing

        os.environ["PENTEST_LIVE_SERVER"] = "true"
        os.environ["PENTEST_BASE_URL"] = self.base_url

        # Modify the runner to support selective testing
        if self.web_only:
            print("🌐 Running WEB INTERFACE tests only...")
            success = self.runner.run_web_pentests()
        elif self.api_only:
            print("🔒 Running API ENDPOINT tests only...")
            success = self.runner.run_api_pentests()
        else:
            print("🔒🌐 Running COMPREHENSIVE security tests...")
            success = self.runner.run_all_tests()

        # Save custom output if specified
        if self.output_file:
            self.save_custom_report()

        return success

    def save_custom_report(self):
        """Save report to custom location"""
        try:
            import json

            with open(self.output_file, "w") as f:
                json.dump(self.runner.results, f, indent=2, default=str)

            print(f"📄 Custom report saved to: {self.output_file}")

        except Exception as e:
            print(f"❌ Failed to save custom report: {e}")


def run_quick_security_check(url="https://polly.pacnp.al"):
    """Quick security check function for programmatic use"""
    print(f"🚀 Quick security check for: {url}")

    runner = SecurityTestRunner(base_url=url, use_live_server=True)

    # Run a subset of critical tests
    try:
        # Test basic security headers
        from tests.test_web_pentest import WebPentestSuite

        web_suite = WebPentestSuite(base_url=url, use_live_server=True)

        print("🔍 Checking security headers...")
        headers_result = web_suite.test_security_headers()

        print("\n📊 Security Headers Status:")
        for header, status in headers_result.items():
            if status == "MISSING":
                print(f"❌ {header}: {status}")
            elif "WEAK" in status:
                print(f"⚠️  {header}: {status}")
            else:
                print(f"✅ {header}: {status}")

        # Test basic endpoint accessibility
        print("\n🔍 Testing endpoint accessibility...")
        import requests

        session = requests.Session()

        test_endpoints = ["/", "/login", "/dashboard", "/static/favicon.ico"]

        for endpoint in test_endpoints:
            try:
                response = session.get(f"{url}{endpoint}", timeout=10)
                status_icon = "✅" if response.status_code < 400 else "❌"
                print(f"{status_icon} {endpoint}: {response.status_code}")
            except Exception as e:
                print(f"❌ {endpoint}: Error - {e}")

        print(f"\n✅ Quick security check completed for {url}")
        return True

    except Exception as e:
        print(f"❌ Quick security check failed: {e}")
        return False


if __name__ == "__main__":
    exit_code = main()
    sys.exit(exit_code)
